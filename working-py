# server.py
from flask import Flask, request, jsonify
from flask_cors import CORS
import cv2
import numpy as np
from io import BytesIO
import base64

app = Flask(__name__)
CORS(app)

def remove_background(image):
    try:
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY)

        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        mask = np.zeros_like(image)
        cv2.drawContours(mask, contours, -1, (255, 255, 255), thickness=cv2.FILLED)

        result = cv2.bitwise_and(image, mask)

        return result
    except Exception as e:
        print(f"Error in remove_background: {str(e)}")
        raise  # Re-raise the exception to get more detailed information

@app.route('/remove-background', methods=['POST'])
def process_image():
    if 'image_file' not in request.files:
        return jsonify({'error': 'No image file provided'})

    image_file = request.files['image_file']
    if image_file.filename == '':
        return jsonify({'error': 'No selected image file'})

    try:
        image_bytes = image_file.read()
        image_np = np.frombuffer(image_bytes, np.uint8)
        image = cv2.imdecode(image_np, cv2.IMREAD_COLOR)

        result_image = remove_background(image)

        if 'error' in result_image:
            return jsonify({'error': result_image['error']})

        _, result_image_encoded = cv2.imencode('.png', result_image)
        result_image_bytes = BytesIO(result_image_encoded.tobytes())
        result_image_base64 = base64.b64encode(result_image_bytes.read()).decode('utf-8')

        return jsonify({'data': {'result_url': 'data:image/png;base64,' + result_image_base64}})
    except Exception as e:
        print(f"Error in process_image: {str(e)}")
        return jsonify({'error': f'Internal Server Error: {str(e)}'})

if __name__ == '__main__':
    app.run(debug=True)
